import splitPostgresConnectionString from '../core/common/utils/get-db-configs';

require('dotenv').config();

const {
  ACCESS_KEY,
  ACCESS_TOKEN_MAX_AGE,
  CLOUD_NAME,
  CLOUDINARY_API_KEY,
  CLOUDINARY_API_SECRET,
  DATABASE_URL,
  FRONTEND_DOMAIN,
  MAIL_FROM,
  MAIL_HOST,
  MAIL_PASSWORD,
  MAIL_USER,
  NODE_ENV,
  PORT,
  REFRESH_TOKEN_KEY,
  REFRESH_TOKEN_MAX_AGE,
  SENDGRID_API_KEY,
  SECRET_KEY,
  SENDGRID_VERIFIED_EMAIL,
} = process.env;

let POSTGRES_HOST,
  POSTGRES_PORT,
  POSTGRES_USER,
  POSTGRES_PASSWORD,
  POSTGRES_DATABASE;

if (NODE_ENV === 'production') {
  ({
    host: POSTGRES_HOST,
    port: POSTGRES_PORT,
    username: POSTGRES_USER,
    password: POSTGRES_PASSWORD,
    database: POSTGRES_DATABASE,
  } = splitPostgresConnectionString(DATABASE_URL));
} else {
  POSTGRES_HOST = process.env.POSTGRES_HOST;
  POSTGRES_PORT = process.env.POSTGRES_PORT;
  POSTGRES_USER = process.env.POSTGRES_USER;
  POSTGRES_PASSWORD = process.env.POSTGRES_PASSWORD;
  POSTGRES_DATABASE = process.env.POSTGRES_DATABASE;
}

export {
  ACCESS_KEY,
  ACCESS_TOKEN_MAX_AGE,
  CLOUD_NAME,
  CLOUDINARY_API_KEY,
  CLOUDINARY_API_SECRET,
  FRONTEND_DOMAIN,
  MAIL_FROM,
  MAIL_HOST,
  MAIL_PASSWORD,
  MAIL_USER,
  NODE_ENV,
  PORT,
  POSTGRES_DATABASE,
  POSTGRES_HOST,
  POSTGRES_PASSWORD,
  POSTGRES_PORT,
  POSTGRES_USER,
  REFRESH_TOKEN_KEY,
  REFRESH_TOKEN_MAX_AGE,
  SENDGRID_API_KEY,
  SECRET_KEY,
  SENDGRID_VERIFIED_EMAIL,
};
